// Code generated by sdkgen; DO NOT EDIT.

package client

import (
    "time"
)

{{ $schema := . }}

{{ range $name, $definition := $schema.Definitions }}
{{ if eq $definition.Type "object" }}

type {{ toCamelCase $name }} struct {
    {{ range $propName, $prop := $definition.Properties }} {{ toCamelCase $propName }} {{ extractTypeName $schema $name $prop }} `json:"{{ $propName }}"` 
    {{ end }}
}

{{ else }}

type {{ toCamelCase $name }} {{ extractTypeName $schema $name (definitionToProperty $definition) }}

{{ end }}
{{ end }}

{{ range $name, $response := $schema.Responses }}
{{ if eq $response.Schema.Type "object" }}

type {{ toCamelCase $name }} struct {
    {{ range $propName, $prop := $response.Schema.Properties}} {{ toCamelCase $propName }} {{ extractTypeName $schema $name $prop }} `json:"{{ $propName }}"` 
    {{ end }}
}

{{ end }}
{{ end }}

{{ range $apiName, $_ := $schema.ApiPathsMap }}
type {{ toCamelCase $apiName }}API struct {
    client *APIClient
}
{{ end }}


type ClientConfiguration struct {
    BaseURL string
	DefaultHTTPHeaders map[string]string
}

type APIClient struct {
    cfg ClientConfiguration
    {{ range $apiName, $_ := $schema.ApiPathsMap }} {{ toCamelCase $apiName }} *{{ toCamelCase $apiName }}API
    {{ end }}
}

// NewAPIClient creates a new API client.
func NewAPIClient(cfg ClientConfiguration) *APIClient {
    client := &APIClient{
        cfg: cfg,
        {{ range $apiName, $_ := $schema.ApiPathsMap }} {{ toCamelCase $apiName }}: &{{ toCamelCase $apiName }}API{},
        {{ end }}
    }

    {{ range $apiName, $_ := $schema.ApiPathsMap }} client.{{ toCamelCase $apiName }}.client = client
    {{ end }}
    return client
}