// Code generated by sdkgen; DO NOT EDIT.

package client

import (
    "time"
    "context"
    "fmt"
    "strings"
    "github.com/machinebox/graphql"
)

{{ $schema := . }}

{{/* Generating Go types for graphql Unions */}}
{{ range $union := .Unions }}

{{ $unionName := toCamelCase $union.Name }}
{{ extractGoComment $union.Name $union.Description }} type {{ $unionName }} interface {
    Is{{ $unionName }}()
}

{{ range $type := $union.Types }}func (u {{ toCamelCase $type }}) Is{{ $unionName }}() {}
{{ end }}

type {{ $unionName }}Instance struct {
    {{ range $fieldName := extractUnionFields $schema $union }}{{ toCamelCase $fieldName }} interface{} `json:"{{ $fieldName }}"`
    {{ end }} TypeName string `json:"__typename"`
}

func (i {{ $unionName }}Instance) Decode(v interface{}) error {
    iBytes, err := json.Marshal(i)
    if err != nil {
        return err
    }
    return json.Unmarshal(iBytes, v)
}

{{ end }}

{{/* Generating Go types for graphql Enums */}}
{{ range $enum := .Enums }}
{{ if isExported $enum.Name }}
{{ $enumName := toCamelCase $enum.Name }}

{{ extractGoComment $enum.Name $enum.Description }} type {{ $enumName }} string

var (
    {{ range $val := $enum.EnumValues }} {{ $enumName }}{{ toCamelCase $val.Name }} {{ $enumName }} = "{{ toCamelCase $val.Name }}"
    {{ end }}
)

func (e {{ $enumName }}) IsValid() bool {
    switch e {
    case {{ range $key, $val := $enum.EnumValues }} {{ $enumName }}{{ toCamelCase $val.Name }} {{ if not (isLastEnumField $enum.EnumValues $key) }}, {{ end }} {{ end }}:
        return true
    }
    return false
}

func (e {{ $enumName }}) String() string {
    return string(e)
}
{{ end }}
{{ end }}

{{/* Generating Go types for graphql Types */}}
{{ range $val := .Objects }}
{{ if isExported $val.Name }}

{{ extractGoComment $val.Name $val.Description }} type {{ $val.Name }} struct {
    {{ range $field := $val.Fields }} {{ extractGoComment $field.Name $field.Description }} {{ if and (isExported $field.Name) (isExported $field.Type.Name) }} {{ toCamelCase $field.Name }} {{ extractFieldTypeName $schema $field.Name $field.Type 1 }} `json:"{{ $field.Name }}"` {{ end }}
    {{ end }}
}
{{ end }}
{{ end }}

{{/* Generating Go types for graphql Inputs */}}
{{ range $val := .Inputs }}
{{ if isExported $val.Name }}

{{ extractGoComment $val.Name $val.Description }} type {{ $val.Name }} struct {
    {{ range $field := $val.Fields }} {{ extractGoComment $field.Name $field.Description }} {{ if and (isExported $field.Name) (isExported $field.Type.Name) }} {{ toCamelCase $field.Name }} {{ extractFieldTypeName $schema $field.Name $field.Type }} `json:"{{ $field.Name }}"` {{ end }}
    {{ end }}
}
{{ end }}
{{ end }}

// ClientConfig is the config used for creating a new
// graphql client.
type ClientConfig struct {
	MutationURL        string
	QueryURL           string
	SubscriptionURL    string
	DefaultHTTPHeaders map[string]string
}

// GqlClient represents a graphql client.
type GqlClient struct {
    Mutation *Mutation
    Query *Query
    config ClientConfig
}

// NewClient returns a new graphql client.
func NewClient(config ClientConfig) *GqlClient {
    return &GqlClient{
        Mutation: &Mutation{
            graphClient: graphql.NewClient(config.MutationURL),
            defaultHTTPHeaders: config.DefaultHTTPHeaders,
        },
        Query: &Query{
            graphClient: graphql.NewClient(config.QueryURL),
            defaultHTTPHeaders: config.DefaultHTTPHeaders,
        },
    }
}

type Mutation struct {
	graphClient *graphql.Client
    defaultHTTPHeaders map[string]string
}

{{ range $mutation := $schema.Mutations }} 
{{ if isExported $mutation.Name }} 
    {{ $responseName := extractFieldTypeName $schema $mutation.Name $mutation.Type }}
    {{ $pointerResponse := toPointerTypeName $schema $responseName $mutation.Type }}
    {{ extractGoComment $mutation.Name $mutation.Description }} func (m *Mutation) {{ toCamelCase $mutation.Name }}(ctx context.Context, {{ range $arg := $mutation.Arguments }} {{ $arg.Name }} {{ extractFieldTypeName $schema $arg.Name $arg.Type }}, {{ end }} gqlFields string) ({{ $pointerResponse }}, error) {
        req := graphql.NewRequest(fmt.Sprintf(`
            mutation({{ range $arg := $mutation.Arguments }}${{ $arg.Name }}: {{ $arg.Type }}, {{ end }}) {
                {{ $mutation.Name }}({{ range $arg := $mutation.Arguments }}{{ $arg.Name }}: ${{ $arg.Name }}, {{ end }}) %s
            }
        `, gqlFields))
        {{ range $arg := $mutation.Arguments }} req.Var("{{ $arg.Name }}", {{ $arg.Name }})
        {{ end }}

        for key, value := range m.defaultHTTPHeaders {
            req.Header.Set(key, value)
        }

        var {{ toLowerCamel $mutation.Name }}Response map[string]{{ $pointerResponse }}
        err := m.graphClient.Run(ctx, req, &{{ toLowerCamel $mutation.Name }}Response)
        if err != nil {
            return {{ nilValue $responseName $mutation.Type }}, parseGqlError(err)
        }
        return {{ toLowerCamel $mutation.Name }}Response["{{ $mutation.Name }}"], nil
    }
{{ end }}{{ end }}

type Query struct {
	graphClient *graphql.Client
    defaultHTTPHeaders map[string]string
}

{{ range $query := $schema.Queries }} 
{{ if isExported $query.Name }} 
    {{ $responseName := extractFieldTypeName $schema $query.Name $query.Type }}
    {{ $pointerResponse := toPointerTypeName $schema $responseName $query.Type }}
    {{ extractGoComment $query.Name $query.Description }} func (q *Query) {{ toCamelCase $query.Name }}(ctx context.Context, {{ range $arg := $query.Arguments }} {{ $arg.Name }} {{ extractFieldTypeName $schema $arg.Name $arg.Type }}, {{ end }} gqlFields string) ({{ $pointerResponse }}, error) {
        req := graphql.NewRequest(fmt.Sprintf(`
            query({{ range $arg := $query.Arguments }}${{ $arg.Name }}: {{ $arg.Type }}, {{ end }}) {
                {{ $query.Name }}({{ range $arg := $query.Arguments }}{{ $arg.Name }}: ${{ $arg.Name }}, {{ end }}) %s
            }
        `, gqlFields))
        {{ range $arg := $query.Arguments }} req.Var("{{ $arg.Name }}", {{ $arg.Name }})
        {{ end }}

        for key, value := range q.defaultHTTPHeaders {
            req.Header.Set(key, value)
        }

        var {{ toLowerCamel $query.Name }}Response map[string]{{ $pointerResponse }}
        err := q.graphClient.Run(ctx, req, &{{ toLowerCamel $query.Name }}Response)
        if err != nil {
            return {{ nilValue $responseName $query.Type }}, parseGqlError(err)
        }
        return {{ toLowerCamel $query.Name }}Response["{{ $query.Name }}"], nil
    }
{{ end }}{{ end }}

func parseGqlError(err error) error {
    if err != nil && err.Error() != "" {
        errMsg := err.Error()
        if strings.HasPrefix(errMsg, "graphql: ") {
            return fmt.Errorf(errMsg[9:])
        }
        return err
    }
    return err
}

func StringP(str string) *string {
    return &str
}

func IntP(i int) *int {
    return &i
}

func FloatP(f float64) *float64 {
    return &f
}

func BoolP(b bool) *bool {
    return &b
}

func TimeP(t time.Time) *time.Time {
    return &t
}